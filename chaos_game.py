import matplotlib.pyplot as plt
import numpy as np


def random_point_in_convex_polygon(attractors):
    """
    Generate a random point inside the convex polygon defined by `attractors`.

    :param attractors: A list of [x, y] coordinates defining the convex polygon's vertices.
    :return: A random point [x, y] inside the polygon.
    """
    weights = np.random.rand(len(attractors))
    weights /= weights.sum()
    point = weights @ attractors
    return point


def plot_chaos_game(attractors, iterations, scale=0.5):
    """
    Visualize fractals generated by the chaos game with a random initial point inside the convex hull of attractor points.

    :param attractors: A list of coordinates defining the attractor points.
    :param iterations: Number of iterations to run the chaos game.
    :param fraction: Fractional distance to move towards the chosen attractor.
    """
    attractors = np.array(attractors)

    # Choose an initial point inside the convex region formed by the attractors
    point = random_point_in_convex_polygon(attractors)

    points = [point]

    for _ in range(iterations):
        attractor = attractors[np.random.randint(len(attractors))]
        point = point * scale + attractor * scale
        points.append(point)

    points = np.array(points)

    plt.figure(figsize=(8, 8))
    plt.scatter(points[:, 0], points[:, 1], s=0.1, color="black")
    plt.axis("equal")
    plt.axis("off")
    plt.show()


# Example usage
# Sierpinski Triangle attractors
attractors = [[0, 0], [0.5, np.sqrt(3) / 2], [1, 0]]

plot_chaos_game(attractors, 50000, scale=0.5)
